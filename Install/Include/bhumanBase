#!/bin/bash

if [ -z "${bhDir:-""}" ]; then
  echo "This script is only useful when included into other scripts"
  exit 125
fi

export fileDir="${baseDir}/Files/"
export configDir="${bhDir}/Config/"
export makeDir="${bhDir}/Make/"

export robotsFile="${configDir}/Robots/robots.cfg"

export privateKey="${configDir}/Keys/id_rsa_nao"
export sshOptions="-c arcfour -o PreferredAuthentications=publickey,keyboard-interactive -o NumberOfPasswordPrompts=1 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=quiet"
if [ `uname` = Darwin ]; then
  export rsyncOptions="-qzPha --delete"
else
  export rsyncOptions="-qzPEha --delete"
fi
export sshCommand="ssh -i \"${privateKey}\" ${sshOptions}"

stdout="/dev/null"
stderr="/dev/null"

if [ "${verbosity:-""}" = "" ] ; then
  verbosity=4
fi

if [ "${verbosity}" -ge 6 ]; then
  stdout="/dev/fd/1"
  stderr="/dev/fd/2"
fi

if [[ $(uname) == *CYGWIN* ]]; then
  export pingoptions="-w 1 -n 1"
elif [ $(uname) == "Darwin" ]; then
  export pingoptions="-t 1 -c 1"
else
  export pingoptions="-w 1 -c 1"
fi

debug() {
  if [ ${verbosity} -lt 5 ]; then
    return
  fi
  echo -n "[DEBUG]  : "
  echo "$@"
}

message() {
  if [ ${verbosity} -lt 4 ]; then
    return
  fi
  echo -n "[INFO]: "
  echo "$@"
}

warning() {
  if [ ${verbosity} -lt 3 ]; then
    return
  fi
  echo -n "[WARNING]: "
  echo "$@"
}                                                                                                                                                                     

error() {
  echo -n "[ERROR]: "
  echo "$@"
}

fatal() {
  echo -n "[FATAL]: "
  echo "$@"
  exit 1
}

# checkApp
# return if $1 is found, else calls fatal
# $1: application to search for
# $2: optional comment
checkApp() {
  local app="${1:-""}"
  if ! which $app 2>"${stderr}" >"${stdout}" ; then
    if [ -z "${2:-""}" ]; then
      fatal "Can't find the command '$app' on your system!"
    else
      error "Can't find the command '$app' on your system!"
      fatal "${2}"
    fi
    return 1
  fi
}

# Check for root rights
checkRoot() {
  if [ "$(whoami)" != "root" ]; then
    fatal "you should be root to launch this program"
  fi
}

# checks for bash major version greater or equal than 4
checkBash() {
  if [ ${BASH_VERSINFO[0]} -ge 4 ]; then
    return 0
  else
    return 1
  fi
}

createRobotsFile() {
  if [ ! -f "${robotsFile}" ]; then
    touch "${robotsFile}"
  fi
  if [ ! -s "${robotsFile}" ]; then
	echo "//WARNING: Do not edit this file manually, use the script addRobotIds instead!
robotsIds = [
];" > "${robotsFile}"
  fi
}

# coppies the public key to the robot
# $1: The robotIp
copyKey() {
  message "Copying authorized keys. If prompted please enter password twice (usually nao)."
  chmod 600 "${privateKey}"
  chmod 600 "${fileDir}/authorized_keys"
  if [[ $(uname) == "*CYGWIN*" ]] ; then
    which setfacl >/dev/null && setfacl -s u::rw-,g::---,o:--- "${privateKey}" #due to windows 8
    which setfacl >/dev/null && setfacl -s u::rw-,g::---,o:--- "${fileDir}/authorized_keys" #due to windows 8
  fi
  ssh -i "${privateKey}" ${sshOptions} nao@${1} "mkdir -p .ssh && chmod -R 700 .ssh"
  rsync ${rsyncOptions} -e "${sshCommand}" "${fileDir}/authorized_keys" nao@${1}:.ssh/authorized_keys
}
