Controller = cppStaticLibrary + {

  folder = "Libs"
  root = "$(srcDirRoot)"

  precompiledHeader = {
    "$(srcDirRoot)/Tools/Precompiled/ControllerPch.h"
  }

  files = {
    "$(srcDirRoot)/Controller/**.cpp" = bhCppSource
    "$(srcDirRoot)/Controller/**.h"
    if (platform != "Linux") {
      -"$(srcDirRoot)/Controller/Platform/Linux/**.cpp"
      -"$(srcDirRoot)/Controller/Platform/Linux/**.h"
    }
    if (platform != "MacOSX") {
      -"$(srcDirRoot)/Controller/Platform/macOS/**.cpp"
      -"$(srcDirRoot)/Controller/Platform/macOS/**.h"
    }
    if (host != "Win32") {
      -"$(srcDirRoot)/Controller/Platform/Windows/**.cpp"
      -"$(srcDirRoot)/Controller/Platform/Windows/**.h"
    }
    "$(srcDirRoot)/Tools/Precompiled/BHumanPch.h"
  }
  files += pchFiles

  qtRessourceFiles = "$(srcDirRoot)/Controller/Icons/**.png"
  qtRccFiles = "$(srcDirRoot)/Controller/*.qrc"
  qtMocFiles = {
    "$(srcDirRoot)/Controller/BHToolBar.h"
    "$(srcDirRoot)/Controller/Views/AnnotationView/AnnotationWidget.h"
    "$(srcDirRoot)/Controller/Views/ColorCalibrationView/ColorCalibrationView.h"
    "$(srcDirRoot)/Controller/Views/ColorCalibrationView/RangeSelector.h"
    "$(srcDirRoot)/Controller/Views/ColorCalibrationView/ThresholdSelector.h"
    "$(srcDirRoot)/Controller/Views/ConsoleView.h"
    "$(srcDirRoot)/Controller/Views/DataView/DataWidget.h"
    "$(srcDirRoot)/Controller/Views/DataView/PropertyEditorFactory.h"
    "$(srcDirRoot)/Controller/Views/DataView/PropertyManager.h"
    "$(srcDirRoot)/Controller/Views/DotView.h"
    "$(srcDirRoot)/Controller/Views/ImageView.h"
    "$(srcDirRoot)/Controller/Views/JointView.h"
    "$(srcDirRoot)/Controller/Views/KickView/KickView.h"
    "$(srcDirRoot)/Controller/Views/KickView/KickViewGLWidget.h"
    "$(srcDirRoot)/Controller/Views/KickView/KickViewWidget.h"
    "$(srcDirRoot)/Controller/Views/KickView/TabWidget.h"
    "$(srcDirRoot)/Controller/Views/LogPlayerControlView/LogPlayerControlWidget.h"
    "$(srcDirRoot)/Controller/Views/PlotView.h"
    "$(srcDirRoot)/Controller/Views/SensorView.h"
    "$(srcDirRoot)/Controller/Views/TimeView/TimeWidget.h"
  }
  files += qtFiles

  defines += {
    "QXT_STATIC"
    "TARGET_SIM"
    if (host == "Win32") {
      "_CRT_SECURE_NO_DEPRECATE"
    }
    if (configuration != "Debug") {
      "QT_NO_DEBUG"
    }
  }

  includePaths = {
    "$(srcDirRoot)"
    "$(utilDirRoot)/Eigen"
    "$(utilDirRoot)/SimRobot/Src/SimRobot"
    "$(utilDirRoot)/SimRobot/Src/SimRobotCore2"
    "$(utilDirRoot)/SimRobot/Src/SimRobotEditor"
    "$(utilDirRoot)/GameController/include"
    "$(utilDirRoot)/libjpeg/src"
    "$(utilDirRoot)/libqxt"
    "$(utilDirRoot)/qtpropertybrowser"
    "$(utilDirRoot)/snappy/include"
    if (host == "Win32") {
      "$(utilDirRoot)/SimRobot/Util/qt/Windows/include"
      "$(utilDirRoot)/SimRobot/Util/qt/Windows/include/QtCore"
      "$(utilDirRoot)/SimRobot/Util/qt/Windows/include/QtGui"
      "$(utilDirRoot)/SimRobot/Util/qt/Windows/include/QtNetwork"
      "$(utilDirRoot)/SimRobot/Util/qt/Windows/include/QtOpenGL"
      "$(utilDirRoot)/SimRobot/Util/qt/Windows/include/QtSvg"
      "$(utilDirRoot)/SimRobot/Util/qt/Windows/include/QtWidgets"
      "$(utilDirRoot)/SimRobot/Util/glew/Windows/include"
      "$(utilDirRoot)/Buildchain/Windows/include"
    }
    if (platform == "Linux") {
      "/usr/include/qt5"
      "/usr/include/qt5/QtCore"
      "/usr/include/qt5/QtGui"
      "/usr/include/qt5/QtNetwork"
      "/usr/include/qt5/QtOpenGL"
      "/usr/include/qt5/QtSvg"
      "/usr/include/qt5/QtWidgets"
      "/usr/include/qt"
      "/usr/include/qt/QtCore"
      "/usr/include/qt/QtGui"
      "/usr/include/qt/QtNetwork"
      "/usr/include/qt/QtOpenGL"
      "/usr/include/qt/QtSvg"
      "/usr/include/qt/QtWidgets"
      "/usr/include/x86_64-linux-gnu/qt5"
      "/usr/include/x86_64-linux-gnu/qt5/QtCore"
      "/usr/include/x86_64-linux-gnu/qt5/QtGui"
      "/usr/include/x86_64-linux-gnu/qt5/QtNetwork"
      "/usr/include/x86_64-linux-gnu/qt5/QtOpenGL"
      "/usr/include/x86_64-linux-gnu/qt5/QtSvg"
      "/usr/include/x86_64-linux-gnu/qt5/QtWidgets"
    }
  }

  cppFlags += {
    if (tool == "vcxproj") {
      "/Zm200"
      "/wd4503"
      if (avx == "true" ) {
        "/arch:AVX"
      }
      if (configuration == "Release") {
        "/GS-"
      }
    }
  }

  visualizers = {
    "$(utilDirRoot)/Buildchain/Windows/Visualizers/Angle.natvis"
    "$(utilDirRoot)/Buildchain/Windows/Visualizers/qt5.natvis"
    "$(utilDirRoot)/Eigen/debug/msvc/eigen.natvis"
  }
}
