libbhuman = cppDynamicLibrary + {

  // overwrite platform and c++-compiler for cross compiling
  platform = "Linux"

  if (host == "Win32") { // Even on a 64 Windows host will be Win32
    cppCompiler = "env CCACHE_CPP2=yes ccache clang++ -D__extern_always_inline=inline"
    linker = "$(utilDirRoot)/Buildchain/Windows/bin/ld.exe"
  } else {
    linker = "ld"
  }
  command = "$(linker) -shared $(__soFlags) -o $(output) --eh-frame-hdr -m elf_i386 $(utilDirRoot)/Buildchain/gcc/lib/crti.o $(utilDirRoot)/Buildchain/gcc/lib/crtbeginS.o $(patsubst %,-L%,$(libPaths)) $(input) $(linkFlags) $(LDFLAGS) $(patsubst %,-l%,$(libs)) $(utilDirRoot)/Buildchain/gcc/lib/libstdc++.so.6.0.21 $(utilDirRoot)/Buildchain/gcc/lib/libm-2.13.so $(utilDirRoot)/Buildchain/gcc/lib/libgcc_s.so.1 $(utilDirRoot)/Buildchain/gcc/lib/libc-2.13.so -lc_nonshared $(utilDirRoot)/Buildchain/gcc/lib/libgcc_s.so.1 $(utilDirRoot)/Buildchain/gcc/lib/ld-2.13.so $(utilDirRoot)/Buildchain/gcc/lib/crtendS.o $(utilDirRoot)/Buildchain/gcc/lib/crtn.o"

  folder = "Libs"
  root = "$(srcDirRoot)/libbhuman"
  files = {
    "$(srcDirRoot)/libbhuman/bhuman.h"
    "$(srcDirRoot)/libbhuman/bhuman.cpp" = cppSource
  }

  includePaths = {
    "$(srcDirRoot)"
    "$(utilDirRoot)/GameController/include"
    "$(utilDirRoot)/alcommon/include"
    "$(utilDirRoot)/boost/linux"
    "$(utilDirRoot)/Buildchain/gcc/include"
    "$(utilDirRoot)/Buildchain/gcc/include/c++/5.2.0"
    "$(utilDirRoot)/Buildchain/gcc/include/c++/5.2.0/i686-pc-linux-gnu"
    "$(utilDirRoot)/Buildchain/clang/include"
  }

  libPaths = {
    "$(utilDirRoot)/alcommon/lib/linux"
    "$(utilDirRoot)/Buildchain/gcc/lib"
  }

  libs = {
    "alcommon"
  }

  cppFlags += {
    "-Wconversion"
    "-Wno-sign-conversion"
    "-nostdinc -march=atom -target i686-pc-linux-gnu"
    if (host == "Win32") {
      "-x c++"
    }
  }

  linkFlags += "-nostdlib -soname $(buildDir)/bhuman.so"
  output = "$(buildDir)/libbhuman.so"

  if (tool == "vcxproj") {
    buildCommand = "bashexec \"uname -o | sed 's@Cygwin@$(winMarePath) --ignore-dependencies $(target) config=$(configuration)@; s@GNU\/Linux@$(linuxMarePath) --ignore-dependencies $(target) config=$(configuration)@' | bash\""
    reBuildCommand = "bashexec \"uname -o | sed 's@Cygwin@$(winMarePath) --ignore-dependencies rebuild $(target) config=$(configuration)@; s@GNU\/Linux@$(linuxMarePath) --ignore-dependencies rebuild $(target) config=$(configuration)@' | bash\""
    cleanCommand = "$(winMarePath) --ignore-dependencies clean $(target) config=$(configuration)"
  }
}
